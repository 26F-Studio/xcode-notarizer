name: Xcode notarizer
description: Notarize Xcode products using notarytool
branding:
  icon: "check-circle"
  color: "green"
inputs:
  product-path:
    description: |
      Path to the product
      Support .app, .dmg and .pkg
      Would create temporary .zip file if using .app product
    required: true
  apple-id:
    description: |
      Apple ID of the developer
      should also specify app-password and team-id
    required: false
  app-password:
    description: |
      App specific password of the product
      should also specify apple-id and team-id
    required: false
  team-id:
    description: |
      Developer team ID of the product
      should also specify apple-id and app-password
    required: false
  staple:
    description: |
      Whether to staple product or not
      Should either be true or false
    required: false
    default: true
runs:
  using: "composite"
  steps:
    - name: Notarize application bundle
      shell: python3 {0}
      run: |
        import json
        import os
        import subprocess
        package_path = "${{ inputs.package-path }}"
        temp_file_path = "${{ runner.temp }}/temp_for_notarize.zip"
        if package_path[-4:] == ".app":
            print("Product is an app folder, creating temporary zip...")
            os.system(
                "ditto -c -k --sequesterRsrc --keepParent " +
                package_path + " " + temp_file_path
            )
        else:
            temp_file_path = package_path
        result = json.loads(
            print("Submitting with notarytool...")
            subprocess.run(
                "xcrun notarytool submit " + temp_file_path +
                " --output-format json --wait"
                ' --apple-id "${{ inputs.apple-id }}"'
                ' --password "${{ inputs.app-password }}"'
                ' --team-id "${{ inputs.team-id }}"',
                stdout=subprocess.PIPE,
                shell=True
            ).stdout.decode('utf-8')
        )
        print("Notarization response:")
        print(result)
        if result["status"] == "Accepted":
            if "${{ inputs.staple }}" != "false"
                print("Stapling product...")
                os.system("xcrun stapler staple " + package_path)
            if package_path[-4:] == ".app":
                print("Deleting temporary zip...")
                os.remove(temp_file_path)
            print("Notarization succeeded!")
        else:
            print("Notarization failed: " + result["message"])
            exit(1)
